---
description: "Enforces conventional commit message format for better version control and changelog generation"
globs: ["**/*"]
---

# Conventional Commit Messages

Use the Conventional Commit Messages specification to generate commit messages.

## Commit Message Structure

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

## Commit Types

- `fix`: Patches a bug in your codebase (correlates with PATCH in Semantic Versioning)
- `feat`: Introduces a new feature to the codebase (correlates with MINOR in Semantic Versioning)
- `BREAKING CHANGE`: Introduces a breaking API change (correlates with MAJOR in Semantic Versioning)
- Other allowed types: `build:`, `chore:`, `ci:`, `docs:`, `style:`, `refactor:`, `perf:`, `test:`

## Specification Details

1. Commits MUST be prefixed with a type, followed by an OPTIONAL scope, OPTIONAL !, and REQUIRED terminal colon and space
2. The type `feat` MUST be used when adding a new feature
3. The type `fix` MUST be used when fixing a bug
4. A scope MAY be provided after a type, surrounded by parenthesis (e.g., `fix(parser):`)
5. A description MUST immediately follow the colon and space
6. A longer commit body MAY be provided after the short description
7. One or more footers MAY be provided one blank line after the body
8. Breaking changes MUST be indicated in the type/scope prefix or as a footer
9. If included as a footer, a breaking change MUST use: `BREAKING CHANGE: description`
10. If included in the type/scope prefix, breaking changes MUST use `!` before the `:`
11. Types other than `feat` and `fix` MAY be used
12. Information MUST NOT be treated as case sensitive, except for `BREAKING CHANGE`
13. `BREAKING-CHANGE` MUST be synonymous with `BREAKING CHANGE`

## Examples

```
feat: add new authentication system

This commit adds a new authentication system using JWT tokens.
The system supports both local and OAuth authentication methods.

BREAKING CHANGE: Authentication endpoints have been moved to /api/v2/auth
```

```
fix(parser): handle empty input gracefully

Previously, the parser would throw an error when given empty input.
This commit adds proper handling for empty input cases.
```

```
chore: update dependencies

- Update React to v18.2.0
- Update TypeScript to v4.9.5
- Update Jest to v29.5.0
``` 