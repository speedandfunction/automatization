services:
  # n8n service
  n8n:
    container_name: n8n
    build:
      context: .
      dockerfile: Dockerfile.n8n
    ports:
      - "${N8N_PORT:-5678}:5678"
    depends_on:
      redis:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    environment:
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678/}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-a_random_string_for_encryption}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - NODE_ENV=production
      - N8N_METRICS=true
      - N8N_HEALTH_CHECK_ENDPOINT=true
      - N8N_EXPRESS_TRUST_PROXY=true
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgresql
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB_N8N:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER_N8N:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD_N8N:-n8n_password}
      - N8N_LOG_LEVEL=debug
      - N8N_LOG_OUTPUT=console
      - TZ=${TZ:-America/New_York}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./scripts:/home/node/scripts
    networks:
      - app-network
    user: node
    develop:
      watch:
        - path: .
          action: rebuild

  postgresql:
    container_name: temporal-postgresql
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB_N8N: ${POSTGRES_DB_N8N:-n8n}
      POSTGRES_USER_N8N: ${POSTGRES_USER_N8N:-n8n}
      POSTGRES_PASSWORD_N8N: ${POSTGRES_PASSWORD_N8N:-n8n_password}
      POSTGRES_DB_TEMPORAL: ${POSTGRES_DB_TEMPORAL:-temporal}
      POSTGRES_USER_TEMPORAL: ${POSTGRES_USER_TEMPORAL:-temporal}
      POSTGRES_PASSWORD_TEMPORAL: ${POSTGRES_PASSWORD_TEMPORAL:-temporal}
      POSTGRES_DB_TEMPORAL_VISIBILITY: ${POSTGRES_DB_TEMPORAL_VISIBILITY:-temporal_visibility}
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - app-network
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${POSTGRES_USER_N8N:-n8n} -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='${POSTGRES_DB_N8N:-n8n}'\" | grep -q 1 && psql -U ${POSTGRES_USER_TEMPORAL:-temporal} -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='${POSTGRES_DB_TEMPORAL:-temporal}'\" | grep -q 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  temporal:
    container_name: temporal
    build:
      context: .
      dockerfile: Dockerfile.temporal
      args:
        - HOST=temporal
        - TEMPORAL_PORT=${TEMPORAL_PORT:-7233}
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      TEMPORAL_PORT: ${TEMPORAL_PORT:-7233}
      POSTGRES_SEEDS: postgresql
      DB_PORT: ${POSTGRES_PORT:-5432}
      DBNAME: ${POSTGRES_DB_TEMPORAL:-temporal}
      POSTGRES_USER: ${POSTGRES_USER_TEMPORAL:-temporal}
      POSTGRES_PWD: ${POSTGRES_PASSWORD_TEMPORAL:-temporal}
      DB: postgres12
      VISIBILITY_DB_NAME: ${POSTGRES_DB_TEMPORAL_VISIBILITY:-temporal_visibility}
      VISIBILITY_DB_USER: ${POSTGRES_USER_TEMPORAL:-temporal}
      VISIBILITY_DB_PWD: ${POSTGRES_PASSWORD_TEMPORAL:-temporal}
      VISIBILITY_DB_PORT: ${POSTGRES_PORT:-5432}
    networks:
      - app-network
    user: temporal
    develop:
      watch:
        - path: .
          action: rebuild
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:${TEMPORAL_PORT:-7233}", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui:2.10.3
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_UI_PORT=${TEMPORAL_UI_PORT:-8080}
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT:-7233}
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - ${TEMPORAL_UI_PORT:-8080}:8080
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://temporal-ui:${TEMPORAL_UI_PORT:-8080}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-your_strong_password}"]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal-worker-main:
    container_name: temporal-worker-main
    build:
      context: .
      dockerfile: Dockerfile.temporal-worker-main
      target: dev
    depends_on:
      temporal:
        condition: service_healthy
    volumes:
      - ./workers/main:/app/main
      - ./workers/common:/app/common
      - /app/main/node_modules
    networks:
      - app-network
    develop:
      watch:
        - path: .
          action: rebuild

volumes:
  n8n_data:
  postgresql-data:
  redis-data:

networks:
  app-network:
    driver: bridge
