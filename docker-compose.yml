services:
  # n8n service
  n8n:
    container_name: n8n
    build:
      context: .
      dockerfile: Dockerfile.n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT}:5678"
    environment:
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - "N8N_RUNNERS_ENABLED=true"
      - "N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true"
      - "N8N_PORT=5678"
      - "NODE_ENV=production"
      - "N8N_METRICS=true"
      - "N8N_HEALTH_CHECK_ENDPOINT=true"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network
    user: node
    develop:
      watch:
        - path: .
          action: rebuild

  # Temporal services
  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:2.5.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m"
      - "DISABLE_SECURITY_PLUGIN=${DISABLE_SECURITY_PLUGIN}"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
    ports:
      - ${OPENSEARCH_PORT}:9200
    cap_add:
      - IPC_LOCK
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:${OPENSEARCH_PORT}/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  postgresql:
    container_name: temporal-postgresql
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - app-network
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  temporal:
    container_name: temporal
    build:
      context: .
      dockerfile: Dockerfile.temporal
      args:
        - HOST=temporal
        - TEMPORAL_PORT=${TEMPORAL_PORT}
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    environment:
      - ES_SEEDS=opensearch
      - ES_VERSION=v7
      - DB=postgresql
      - DB_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - ENABLE_ES=true
      - HOST=temporal
      - TEMPORAL_PORT=7233
    ports:
      - ${TEMPORAL_PORT}:7233
    networks:
      - app-network
    user: temporal
    develop:
      watch:
        - path: .
          action: rebuild

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui:2.10.3
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT}
      - TEMPORAL_PERMIT_WRITE_API=true
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://temporal-ui:80"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  oauth2-proxy:
    container_name: temporal-oauth-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.8.0
    restart: unless-stopped
    depends_on:
      - temporal-ui
    env_file:
      - .env
    ports:
      - "80:80"
    environment:
      # Google provider settings
      - OAUTH2_PROXY_PROVIDER=google
      - OAUTH2_PROXY_CLIENT_ID=${GOOGLE_CLIENT_ID:?GOOGLE_CLIENT_ID is required}
      - OAUTH2_PROXY_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:?GOOGLE_CLIENT_SECRET is required}
      
      # Email validation settings
      - OAUTH2_PROXY_EMAIL_DOMAINS=${OAUTH2_PROXY_EMAIL_DOMAINS:?OAUTH2_PROXY_EMAIL_DOMAINS is required}
      
      # Required settings
      - OAUTH2_PROXY_COOKIE_DOMAINS=.lvh.me
      - OAUTH2_PROXY_WHITELIST_DOMAINS=.lvh.me
      - OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:80
      - OAUTH2_PROXY_UPSTREAMS=http://temporal-ui:80
      - OAUTH2_PROXY_REDIRECT_URL=${OAUTH2_PROXY_REDIRECT_URL:-http://temporal.lvh.me/oauth2/callback}
      - OAUTH2_PROXY_COOKIE_SECRET=${OAUTH2_PROXY_COOKIE_SECRET:-cookie-secret-1234567890}
      
      # Cookie settings
      - OAUTH2_PROXY_COOKIE_NAME=_oauth2_proxy
      - OAUTH2_PROXY_COOKIE_SECURE=false
      - OAUTH2_PROXY_COOKIE_HTTPONLY=true
      - OAUTH2_PROXY_COOKIE_SAMESITE=lax
      - OAUTH2_PROXY_COOKIE_REFRESH=1h
      - OAUTH2_PROXY_COOKIE_EXPIRE=168h
      
      # CSRF protection settings
      - OAUTH2_PROXY_CSRF_COOKIE_NAME=_oauth2_proxy_csrf
      - OAUTH2_PROXY_CSRF_COOKIE_SECURE=false
      - OAUTH2_PROXY_CSRF_COOKIE_DOMAIN=.lvh.me
      - OAUTH2_PROXY_CSRF_COOKIE_HTTPONLY=true
      - OAUTH2_PROXY_CSRF_COOKIE_SAMESITE=lax
      
      # Debug settings
      - OAUTH2_PROXY_SHOW_DEBUG_ON_ERROR=true
      
      # Logout settings
      - OAUTH2_PROXY_SIGN_OUT_URL=http://temporal.lvh.me/oauth2/sign_out
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://localhost:80/oauth2/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

volumes:
  n8n_data:
  opensearch-data:
  postgresql-data:

networks:
  app-network:
    driver: bridge
