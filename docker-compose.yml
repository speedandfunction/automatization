services:
  # n8n service
  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    ports:
      - "5678:5678"
    environment:
      - WEBHOOK_URL=http://localhost:5678/
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network
    user: node

  # Temporal services
  elasticsearch:
    container_name: temporal-elasticsearch
    image: opensearchproject/opensearch:2.5.0
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m"
      - "DISABLE_SECURITY_PLUGIN=true"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
    ports:
      - 9200:9200
    cap_add:
      - IPC_LOCK
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/opensearch/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:9200/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgresql:
    container_name: temporal-postgresql
    image: postgres:14
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    ports:
      - 5432:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - app-network
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  temporal:
    container_name: temporal
    build:
      context: .
      dockerfile: Dockerfile.temporal
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - 7233:7233
    networks:
      - app-network
    user: temporal

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui:2.10.3
    depends_on:
      temporal:
        condition: service_started
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - 8080:8080
    networks:
      - app-network

volumes:
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/n8n_data
  elasticsearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/elasticsearch-data
  postgresql-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/postgresql-data

networks:
  app-network:
    driver: bridge 