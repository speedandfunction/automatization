services:
  # n8n service
  n8n:
    container_name: n8n
    build:
      context: .
      dockerfile: Dockerfile.n8n
      args:
        - N8N_PORT=5678
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network
    user: node

  # Temporal services
  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:2.5.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m"
      - "DISABLE_SECURITY_PLUGIN=${DISABLE_SECURITY_PLUGIN}"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
    ports:
      - 9200:9200
    cap_add:
      - IPC_LOCK
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:9200/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  postgresql:
    container_name: temporal-postgresql
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - app-network
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  temporal:
    container_name: temporal
    build:
      context: .
      dockerfile: Dockerfile.temporal
      args:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - ES_SEEDS=opensearch
        - ES_VERSION=v7
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    environment:
      - ES_SEEDS=opensearch
      - ES_VERSION=v7
    ports:
      - 7233:7233
    networks:
      - app-network
    user: temporal

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui:2.10.3
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - 8080:8080
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/n8n_data
  opensearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/opensearch-data
  postgresql-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/postgresql-data

networks:
  app-network:
    driver: bridge
